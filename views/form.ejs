<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>AI Image Problem Solver - Saarthi</title>
    <link rel="stylesheet" href="/css/modern.css" />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
    />
    <style>
      .page-container {
        min-height: 100vh;
        background: linear-gradient(135deg, var(--background), #f1f5f9);
        padding: 2rem 0;
      }

      .upload-area {
        border: 2px dashed var(--border);
        border-radius: var(--radius);
        padding: 3rem 2rem;
        text-align: center;
        transition: var(--transition);
        background: var(--surface);
        cursor: pointer;
        position: relative;
      }

      .upload-area:hover {
        border-color: var(--primary-color);
        background: rgba(99, 102, 241, 0.05);
      }

      .upload-area.dragover {
        border-color: var(--primary-color);
        background: rgba(99, 102, 241, 0.1);
      }

      .upload-icon {
        font-size: 3rem;
        color: var(--primary-color);
        margin-bottom: 1rem;
      }

      .upload-text {
        color: var(--text-secondary);
        margin-bottom: 1rem;
      }

      .upload-hint {
        font-size: 0.875rem;
        color: var(--text-secondary);
      }

      .file-preview {
        margin-top: 2rem;
        text-align: center;
      }

      .preview-image {
        max-width: 300px;
        max-height: 300px;
        border-radius: var(--radius);
        box-shadow: var(--shadow);
        margin-bottom: 1rem;
      }

      .file-info {
        background: var(--surface);
        padding: 1rem;
        border-radius: var(--radius);
        border: 1px solid var(--border);
        margin-bottom: 1rem;
      }

      .file-name {
        font-weight: 600;
        color: var(--text-primary);
        margin-bottom: 0.5rem;
      }

      .file-size {
        color: var(--text-secondary);
        font-size: 0.875rem;
      }

      .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        display: none;
        align-items: center;
        justify-content: center;
        z-index: 1000;
      }

      .loading-card {
        background: var(--surface);
        padding: 2rem;
        border-radius: var(--radius);
        text-align: center;
        box-shadow: var(--shadow-lg);
      }

      .loading-spinner {
        width: 48px;
        height: 48px;
        border: 4px solid var(--border);
        border-top: 4px solid var(--primary-color);
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto 1rem;
      }

      .loading-text {
        color: var(--text-primary);
        font-weight: 600;
        margin-bottom: 0.5rem;
      }

      .loading-subtext {
        color: var(--text-secondary);
        font-size: 0.875rem;
      }

      .result-container {
        margin-top: 2rem;
        display: none;
      }

      .result-header {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-bottom: 1rem;
        color: var(--primary-color);
        font-weight: 600;
      }

      .copy-result {
        background: var(--primary-color);
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: var(--radius);
        cursor: pointer;
        transition: var(--transition);
        font-size: 0.875rem;
      }

      .copy-result:hover {
        background: var(--primary-dark);
      }

      .error-message {
        background: #fef2f2;
        border: 1px solid #fecaca;
        color: #dc2626;
        padding: 1rem;
        border-radius: var(--radius);
        margin-top: 1rem;
      }

      .success-message {
        background: #f0fdf4;
        border: 1px solid #bbf7d0;
        color: #16a34a;
        padding: 1rem;
        border-radius: var(--radius);
        margin-top: 1rem;
      }
    </style>
  </head>
  <body>
    <!-- Include Navbar -->
    <%- include('navbar') %>

    <div class="page-container">
      <div class="container">
        <!-- Header -->
        <div class="text-center mb-5">
          <h1 class="section-title">
            <i class="fas fa-camera"></i> AI Image Problem Solver
          </h1>
          <p class="text-secondary">
            Upload an image of any problem and get instant AI-powered solutions
            and explanations
          </p>
        </div>

        <!-- Upload Area -->
        <div class="card">
          <div class="upload-area" id="uploadArea">
            <div class="upload-icon">
              <i class="fas fa-cloud-upload-alt"></i>
            </div>
            <div class="upload-text">
              <h3>Drop your image here</h3>
              <p>or click to browse files</p>
            </div>
            <div class="upload-hint">Supports JPG, PNG, GIF up to 10MB</div>
            <input
              type="file"
              id="imageInput"
              accept="image/*"
              style="display: none"
            />
          </div>

          <!-- File Preview -->
          <div class="file-preview" id="filePreview" style="display: none">
            <img id="previewImage" class="preview-image" alt="Preview" />
            <div class="file-info">
              <div class="file-name" id="fileName"></div>
              <div class="file-size" id="fileSize"></div>
            </div>
            <button class="btn btn-primary" onclick="uploadImage()">
              <i class="fas fa-magic"></i> Solve with AI
            </button>
          </div>
        </div>

        <!-- Result Container -->
        <div class="result-container" id="resultContainer">
          <div class="card">
            <div class="result-header">
              <i class="fas fa-robot"></i>
              <span>AI Solution</span>
              <button class="copy-result" onclick="copyResult()">
                <i class="fas fa-copy"></i> Copy
              </button>
            </div>
            <div class="gemini-output" id="resultContent"></div>
          </div>
        </div>

        <!-- Error/Success Messages -->
        <div id="messageContainer"></div>
      </div>
    </div>

    <!-- Loading Overlay -->
    <div class="loading-overlay" id="loadingOverlay">
      <div class="loading-card">
        <div class="loading-spinner"></div>
        <div class="loading-text">Analyzing your image...</div>
        <div class="loading-subtext">Our AI is processing your problem</div>
      </div>
    </div>

    <script>
      const uploadArea = document.getElementById("uploadArea");
      const imageInput = document.getElementById("imageInput");
      const filePreview = document.getElementById("filePreview");
      const previewImage = document.getElementById("previewImage");
      const fileName = document.getElementById("fileName");
      const fileSize = document.getElementById("fileSize");
      const resultContainer = document.getElementById("resultContainer");
      const resultContent = document.getElementById("resultContent");
      const loadingOverlay = document.getElementById("loadingOverlay");
      const messageContainer = document.getElementById("messageContainer");

      // Click to upload
      uploadArea.addEventListener("click", () => {
        imageInput.click();
      });

      // Drag and drop functionality
      uploadArea.addEventListener("dragover", (e) => {
        e.preventDefault();
        uploadArea.classList.add("dragover");
      });

      uploadArea.addEventListener("dragleave", () => {
        uploadArea.classList.remove("dragover");
      });

      uploadArea.addEventListener("drop", (e) => {
        e.preventDefault();
        uploadArea.classList.remove("dragover");
        const files = e.dataTransfer.files;
        if (files.length > 0) {
          handleFile(files[0]);
        }
      });

      // File input change
      imageInput.addEventListener("change", (e) => {
        if (e.target.files.length > 0) {
          handleFile(e.target.files[0]);
        }
      });

      function handleFile(file) {
        // Validate file type
        if (!file.type.startsWith("image/")) {
          showMessage("Please select an image file.", "error");
          return;
        }

        // Validate file size (10MB)
        if (file.size > 10 * 1024 * 1024) {
          showMessage("File size must be less than 10MB.", "error");
          return;
        }

        // Show preview
        const reader = new FileReader();
        reader.onload = (e) => {
          previewImage.src = e.target.result;
          fileName.textContent = file.name;
          fileSize.textContent = formatFileSize(file.size);
          filePreview.style.display = "block";
          uploadArea.style.display = "none";
        };
        reader.readAsDataURL(file);
      }

      function formatFileSize(bytes) {
        if (bytes === 0) return "0 Bytes";
        const k = 1024;
        const sizes = ["Bytes", "KB", "MB", "GB"];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
      }

      async function uploadImage() {
        const file = imageInput.files[0];
        if (!file) {
          showMessage("Please select an image file.", "error");
          return;
        }

        // Show loading
        loadingOverlay.style.display = "flex";
        hideMessage();

        const formData = new FormData();
        formData.append("image", file);

        try {
          const response = await fetch("/form", {
            method: "POST",
            body: formData,
          });

          if (!response.ok) {
            throw new Error("Upload failed");
          }

          const data = await response.json();

          if (data.error) {
            throw new Error(data.error);
          }

          // Display result
          displayResult(data.result);
          showMessage("Problem solved successfully!", "success");
        } catch (error) {
          console.error("Error:", error);
          showMessage(
            "An error occurred while processing your image. Please try again.",
            "error"
          );
        } finally {
          loadingOverlay.style.display = "none";
        }
      }

      function displayResult(result) {
        // Format the AI response
        const formattedResult = formatAIResponse(result);
        resultContent.innerHTML = formattedResult;
        resultContainer.style.display = "block";

        // Scroll to result
        resultContainer.scrollIntoView({ behavior: "smooth" });
      }

      function formatAIResponse(text) {
        // Convert markdown-like formatting to HTML
        let formatted = text
          // Bold text
          .replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>")
          // Italic text
          .replace(/\*(.*?)\*/g, "<em>$1</em>")
          // Code blocks
          .replace(/```([\s\S]*?)```/g, "<pre><code>$1</code></pre>")
          // Inline code
          .replace(/`([^`]+)`/g, "<code>$1</code>")
          // Lists
          .replace(/^\s*[-*+]\s+(.+)$/gm, "<li>$1</li>")
          // Headers
          .replace(/^### (.+)$/gm, "<h4>$1</h4>")
          .replace(/^## (.+)$/gm, "<h3>$1</h3>")
          .replace(/^# (.+)$/gm, "<h2>$1</h2>")
          // Line breaks
          .replace(/\n/g, "<br>");

        // Wrap lists in ul tags
        formatted = formatted.replace(/(<li>.*<\/li>)/s, "<ul>$1</ul>");

        return formatted;
      }

      function copyResult() {
        const text = resultContent.textContent;
        navigator.clipboard.writeText(text).then(() => {
          const button = document.querySelector(".copy-result");
          const icon = button.querySelector("i");
          const originalText = button.innerHTML;

          button.innerHTML = '<i class="fas fa-check"></i> Copied!';
          button.style.background = "var(--secondary-color)";

          setTimeout(() => {
            button.innerHTML = originalText;
            button.style.background = "var(--primary-color)";
          }, 2000);
        });
      }

      function showMessage(message, type) {
        hideMessage();
        const messageDiv = document.createElement("div");
        messageDiv.className =
          type === "error" ? "error-message" : "success-message";
        messageDiv.innerHTML = `
                <i class="fas fa-${
                  type === "error" ? "exclamation-triangle" : "check-circle"
                }"></i>
                ${message}
            `;
        messageContainer.appendChild(messageDiv);
      }

      function hideMessage() {
        messageContainer.innerHTML = "";
      }

      // Reset functionality
      function resetUpload() {
        uploadArea.style.display = "block";
        filePreview.style.display = "none";
        resultContainer.style.display = "none";
        imageInput.value = "";
        hideMessage();
      }

      // Add reset button to result container
      document.addEventListener("DOMContentLoaded", function () {
        const resetBtn = document.createElement("button");
        resetBtn.className = "btn btn-outline";
        resetBtn.innerHTML =
          '<i class="fas fa-upload"></i> Upload Another Image';
        resetBtn.onclick = resetUpload;
        resetBtn.style.marginTop = "1rem";

        const resultCard = resultContainer.querySelector(".card");
        resultCard.appendChild(resetBtn);
      });
    </script>

    <!-- Include Footer -->
    <%- include('footer') %>
  </body>
</html>
